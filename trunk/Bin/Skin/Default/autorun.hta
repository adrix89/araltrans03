<HTML>
<HEAD>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta http-equiv="MSThemeCompatible" content="Yes">
	<link rel="stylesheet" href="default.css" type="text/css">
	<script src="util.js" type="text/javascript"></script>
	<TITLE>Auto Run</TITLE>
	<HTA:APPLICATION ID="ATHTA_autorun" 
		APPLICATIONNAME="AralTrans 0.3 AutoRun" 
		BORDER="thin"
		CAPTION="yes"
		ICON="../../AralTrans.exe"
		SHOWINTASKBAR="yes"
		SINGLEINSTANCE="no"
		SYSMENU="yes"
		WINDOWSTATE="normal"
		CONTEXTMENU="yes"
		MAXIMIZEBUTTON="no"
		MINIMIZEBUTTON="yes"
		NAVIGABLE="no"
		SCROLL="no"
		SELECTION="no"
		>

<SCRIPT language="javascript">
<!--

window.resizeTo(490,480);

var objAralTransApp = null;
var strSettingFile = "";
var xmlDoc = null;
var elemSetting = null;
var elemDataList = null;
var elemPluginList = null;
var elemContextList = null;

// Parse command line and set to 'strSettingFile'
var cmdLine = ATHTA_autorun.commandLine;
if(cmdLine)
{
	var nStartIdx = cmdLine.toUpperCase().indexOf("AUTORUN.HTA") + 12;
	if(cmdLine.charAt(nStartIdx) == ' ') nStartIdx++;
	if(cmdLine.charAt(nStartIdx) == '\"') nStartIdx++;

	var nCopyLen = cmdLine.length - nStartIdx;
	if(cmdLine.charAt(cmdLine.length-1) == '\"') nCopyLen--;

	strSettingFile = cmdLine.substr(nStartIdx, nCopyLen);

	// Check the file name is correct
	var fso = new ActiveXObject("Scripting.FileSystemObject");
	if(fso.FileExists(strSettingFile) == false)
	{
		alert("Invalid parameter or setting file!\r\n" + strSettingFile);
		window.close();
		strSettingFile = "";
	}

	// Create XML Object
	xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
	xmlDoc.async = false;
	xmlDoc.load(strSettingFile);
	try
	{
		elemSetting = xmlDoc.getElementsByTagName("Setting")[0];
	}
	catch(ex)
	{
		elemSetting = null;
	}

	if(elemSetting == null)
	{
		alert("'" + strSettingFile + "' is not AralTrans setting file!");
		window.close();
		strSettingFile = "";
	}
}

// Connect to AralTrans Application
objAralTransApp = new ActiveXObject("AralTrans.Application");
if(!objAralTransApp)
{
	alert("Can not create or connect to AralTrans object!");
	window.close();
}

function onLocaleProgramChanged()
{
	if(getObject("comboLocaleProgram").selectedIndex == 1)
	{
		getObject("comboAppLocaleOption").style.visibility = "visible";
	}
	else
	{
		getObject("comboAppLocaleOption").style.visibility = "hidden";
	}
}

/////////////////////////////////////////////////////////
// LoadSettingInfo()
/////////////////////////////////////////////////////////
function LoadSettingInfo()
{
	if(!strSettingFile || strSettingFile == "") return;

	// Get mandatory elements
	try
	{
		elemDataList = elemSetting.getElementsByTagName("DataList")[0];
		elemPluginList = elemSetting.getElementsByTagName("PluginList")[0];
		elemContextList = elemSetting.getElementsByTagName("ContextList")[0];
	}
	catch(ex){}

	if( !elemSetting || !elemDataList || !elemPluginList || !elemContextList )
	{
		alert("The file is not AralTrans setting file!");
		getObject("textXmlFilePathName").value = "";
		window.close();
		return;
	}

	// Show basic informations
	getObject("imgThumbnail").src = getChildElemText(elemSetting, "SettingThumbnailUrl"); 
	getObject("lblTitleAndAuthor").innerHTML = "<b>" + getChildElemText(elemSetting, "SettingName")
		+ "</b><br /> <font color='#488917'>by " + getChildElemText(elemSetting, "SettingAuthor") + "</font>";
	getObject("textSettingDescription").value = getChildElemText(elemSetting, "SettingDescription");

	getObject("textExecutionFileFolder").value = getChildElemText(elemSetting, "ExecutionFileFolder"); 
	getObject("textExecutionFileName").value = getChildElemText(elemSetting, "ExecutionFileName"); 
	getObject("textExecutionFileVersion").value = getChildElemText(elemSetting, "ExecutionFileVersion"); 
	getObject("textExecutionFileHash").value = getChildElemText(elemSetting, "ExecutionFileHash"); 

	
	
	getObject("comboLocaleProgram").value = getChildElemText(elemSetting, "LocaleProgram"); 
	getObject("comboAppLocaleOption").value = getChildElemText(elemSetting, "LocaleProgramOption");
	onLocaleProgramChanged();
	getObject("textDelay").value = getChildElemText(elemSetting, "Delay"); 

	getObject("btnRun").focus();
	//autoRun();
}

/////////////////////////////////////////////////////////
// autoRun()
/////////////////////////////////////////////////////////
function autoRun()
{
	var objATProcess = null;

	// At first, try to find the same hash in current process list
	var strHashToFind = getObject("textExecutionFileHash").value;	
	objAralTransApp.RefreshProcessList();	// Invoke RefreshProcessList
	var cnt = objAralTransApp.GetProcessCount();
	for(var i=0; i<cnt; i++)
	{
		var objTmpProcess = objAralTransApp.GetProcess(i);
		if(objTmpProcess.GetExecutionFileHash() == strHashToFind
			&& !objTmpProcess.GetIsHooked())
		{
			// If found, ask to user whether use this process or not
			if(confirm("AralTrans found the process '" + objTmpProcess.GetExecutionFileName() + "'.\r\nDo you want to attach this process?") == 1)
			{
				// If user want to do, we set objATProcess to this process
				objATProcess = objTmpProcess;
			}
			
			break;
		}
	}
	
	// If objATProcess was not setted, we are now executing new process
	if(!objATProcess)
	{
		// Try 1. Union of Specified Directory and File Name
		var strFilePathName = getObject("textExecutionFileFolder").value + "\\" + getObject("textExecutionFileName").value;
		if(objAralTransApp.GetFileHash(strFilePathName) == strHashToFind)
		{
			//alert("Found at try 1");
		}		
		else
		{
			// Try 2. Union Of Upper Directory And File Name
			var nCharIdx;
			var strUpperDir = strSettingFile;
			nCharIdx = strUpperDir.lastIndexOf("\\");
			if(nCharIdx > 0) strUpperDir = strUpperDir.substr(0, nCharIdx);
			nCharIdx = strUpperDir.lastIndexOf("\\");
			if(nCharIdx > 0) strUpperDir = strUpperDir.substr(0, nCharIdx);

			strFilePathName = strUpperDir + "\\" + getObject("textExecutionFileName").value;
			if(objAralTransApp.GetFileHash(strFilePathName) == strHashToFind)
			{
				//alert("Found at try 2");
				getObject("textExecutionFileFolder").value = strUpperDir;
			}		
			else
			{
				alert("Please select the execution file");
				// Try 3. Show File Dialog
				while(true)
				{
					strFilePathName = showOpen("Execution File (*.exe)|*.exe|All Files (*.*)|*.*||", "");
					if(strFilePathName == "")
					{
						break;
					}
					else if(objAralTransApp.GetFileHash(strFilePathName) == strHashToFind)
					{
						//alert("Found at try 3");

						nCharIdx = strFilePathName.lastIndexOf("\\");
						getObject("textExecutionFileFolder").value = strFilePathName.substr(0, nCharIdx);
						getObject("textExecutionFileName").value = strFilePathName.substr(nCharIdx+1);
						break;
					}
					else
					{
						alert("The execution file hash mismatched!");						
					}
				}
			}
		}

		if(!strFilePathName || strFilePathName.length == 0)
		{
			self.close();
			return;
		}
	}

	// Check the folder was same with the element value.
	if(getObject("textExecutionFileFolder").value != getChildElemText(elemSetting, "ExecutionFileFolder"))
	{
		elemSetting.getElementsByTagName("ExecutionFileFolder")[0].text = getObject("textExecutionFileFolder").value;
		xmlDoc.save(strSettingFile);
	}

	// Create temporary file for update
	var fso = new ActiveXObject("Scripting.FileSystemObject");
	var tfolder = fso.GetSpecialFolder(2);
	var tname = fso.GetTempName();
	tf = tfolder.CreateTextFile(tname, true, true);

	// Check data & plugin files exist
	var arrDownloadFiles = new Array();
	var arrMissingFiles = new Array();
	var strAppDir = getObject("textExecutionFileFolder").value;
	//try		
	//{
		// Check data files
		var elemcolData = elemDataList.getElementsByTagName("Data");
		var dataCnt = elemcolData.length;
		for(var i = 0; i < dataCnt; i++)
		{
			var elemData = elemcolData[i];
			var strDataFilePathName = 
				decodePath(getChildElemText(elemData, "DataFileFolder"), strAppDir) 
				+ "\\" +  getChildElemText(elemData, "DataFileName");
			
			if(fso.FileExists(strDataFilePathName) == false)
			{
				var strDownloadUrl = getChildElemText(elemData, "DownloadUrl");
				if(strDownloadUrl && strDownloadUrl.length > 0)
				{
					tf.WriteLine("[File" + arrDownloadFiles.length + "]");
					tf.WriteLine("Location=" + strDataFilePathName);
					tf.WriteLine("DownloadURL=" + strDownloadUrl);
					tf.WriteBlankLines(1) ;
					arrDownloadFiles[arrDownloadFiles.length] = strDataFilePathName;
				}
				else
				{
					arrMissingFiles[arrMissingFiles.length] = strPluginFilePathName;					
				}
			}

		} //for

		// Check plugin files
		var elemcolPlugin = elemPluginList.getElementsByTagName("Plugin");
		var pluginCnt = elemcolPlugin.length;
		for(var i = 0; i < pluginCnt; i++)
		{
			var elemPlugin = elemcolPlugin[i];
			var strPluginFilePathName = 
				decodePath(getChildElemText(elemPlugin, "PluginFileFolder"), strAppDir) 
				+ "\\" +  getChildElemText(elemPlugin, "PluginFileName");
			
			if(fso.FileExists(strPluginFilePathName) == false)
			{
				var strDownloadUrl = getChildElemText(elemPlugin, "DownloadUrl");
				if(strDownloadUrl && strDownloadUrl.length > 0)
				{
					tf.WriteLine("[File" + arrDownloadFiles.length + "]");
					tf.WriteLine("Location=" + strPluginFilePathName);
					tf.WriteLine("DownloadURL=" + strDownloadUrl);
					tf.WriteBlankLines(1) ;
					arrDownloadFiles[arrDownloadFiles.length] = strPluginFilePathName;
				}
				else
				{
					arrMissingFiles[arrMissingFiles.length] = strPluginFilePathName;					
				}
			}

		} //for
	
	//}
	//catch(ex)
	//{
	//	alert(ex.toString());
	//}


	// Close temporary file for update
	tf.Close();
	//alert(tfolder + "\\" + tname);

	// Alert of Missing Files
	if(arrMissingFiles.length > 0)
	{
		var strMissingMsg = "These files do not have download information.\r\n\r\n\r\n";
		for(var i=0; i<arrMissingFiles.length; i++)
		{
			strMissingMsg += (arrMissingFiles[i] + "\r\n");
		}

		strMissingMsg += ("\r\n\r\nDo you want to continue?");

		if(confirm(strMissingMsg) == 0)
		{
			fso.DeleteFile(tfolder + "\\" + tname);	
			self.close();
			return;
		}
	}

	// Execute AralUpdater
	if(arrDownloadFiles.length > 0)
	{
		var bFilesCompleted = false;
		var strDownloadMsg = "You need to download below files.\r\n\r\n\r\n";
		for(var i=0; i<arrDownloadFiles.length; i++)
		{
			strDownloadMsg += (arrDownloadFiles[i] + "\r\n");
		}

		strDownloadMsg += ("\r\n\r\nDo you want to download now?");

		if(confirm(strDownloadMsg) == 1)
		{
			var objShell = new ActiveXObject("WScript.Shell");
			var strCmdLine = "\"" + getAT3Dir() + "\\AralUpdater.exe\" execute \"" + tfolder + "\\" + tname + "\"";
			var nRes = objShell.run(strCmdLine, 1, true);
			if(nRes != -1) bFilesCompleted = true;
		}

		if(bFilesCompleted == false && confirm("Download failed.\r\nDo you want to continue?") == 0)
		{
			fso.DeleteFile(tfolder + "\\" + tname);	
			self.close();
			return;				
		}

	}

	fso.DeleteFile(tfolder + "\\" + tname);	

	// Execute new process
	if(!objATProcess && strFilePathName.length > 0)
	{
		var strLocaleProgram = getObject("comboLocaleProgram").value;
		var strLocaleProgramOption = getObject("comboAppLocaleOption").value;

		objATProcess = objAralTransApp.NewProcess(strFilePathName, strLocaleProgram, strLocaleProgramOption);
		if(!objATProcess)
		{
			alert("Failed to create new process!");
			self.close();
			return;				
		}
	}

	// Delay
	var nDelay = getObject("textDelay").value;
	//alert("isNumeric(" + nDelay + ") : " + isNumeric(nDelay));
	if(isNumeric(nDelay) && nDelay > 0)
	{
		var nWidth = 150;
		var nHeight = 200;
		var nLeftPosition = (screen.width) ? (screen.width-nWidth)/2 : 0; 
		var nTopPosition = (screen.height) ? (screen.height-nHeight)/2 : 0; 

		window.showModalDialog("Delay.hta", nDelay, "dialogTop:" + nTopPosition + "px;dialogLeft:" + nLeftPosition + "px;dialogWidth:" + nWidth + "px;dialogHeight:" + nHeight + "px;");
	}


	// Hook it.
	if(objATProcess.Hook() == false)
	{
		alert("Failed to hook the process!");
		self.close();
		return;
	}

	// Get AralTrans Container.
	var objATContainer;
	while(!objATContainer)
	{
		objATContainer = objATProcess.ATContainer;
	}

	// Apply plugin and context settings to this container.
	if( applySetting(objATContainer, elemPluginList, elemContextList) != true )
	{
		objATContainer.Visible = true;
	}

	self.close();
}

//-->
</SCRIPT>

</HEAD>



<BODY style="padding:20 0 0 10; margin:0 0 0 0;" bgcolor="black" onload="LoadSettingInfo();">

<!-- Start of Author Information -->
<table width="452" border="0" cellpadding="0" cellspacing="0">
	<tr height="30" style="background-image:url(img/bg_graybox_top.gif);background-repeat:no-repeat;background-position-x:left;background-position-y:top;">
		<td style="color:#527A85;font-size:9pt;font-weight:bold;font-style:italic;padding-top:3px;padding-left:10px;vertical-align:top;">
			Setting Info.
		</td>
	</tr>
	<tr>
		<td align="center" bgcolor="#B3B3B3">
			
			<!-- Inner Table -->			
			<table width="435" border="1" bordercolor="#AAAAAA" style="border-collapse:collapse;border:1px solid #AAAAAA;">
				<tr>
					<td width="115" height="125" class="white">
						<img width="115" height="115" id="imgThumbnail">
					</td>
					<td width="320" class="white" >
						<label id="lblTitleAndAuthor">&nbsp;</label>
						<br />
						<textarea name="textSettingDescription" readonly class="textarea1" rows="5" style="width:100%;"></textarea>
					</td>
				</tr>
			</table>
			<!--// Inner Table -->

		</td>
	</tr>
	<tr height="9" style="background-image:url(img/bg_graybox_bottom.gif);background-repeat:no-repeat;background-position-x:left;background-position-y:top;">
		<td>
		</td>
	</tr>
</table>
<!-- End of Author Information -->

<br>

<!-- Start of Yellowbox -->
<table width="452" border="0" cellpadding="0" cellspacing="0">
	<tr height="30" style="background-image:url(img/bg_yellowbox_top.gif);background-repeat:no-repeat;background-position-x:left;background-position-y:top;">
		<td style="color:#527A85;font-size:9pt;font-weight:bold;font-style:italic;padding-top:3px;padding-left:10px;vertical-align:top;">
			Execution Info.
		</td>
	</tr>
	<tr>
		<td align="center" bgcolor="#BFBEA9">
			
			<!-- Inner Table -->			
			<table width="435" border="1" bordercolor="#AAAAAA" style="border-collapse:collapse;border:1px solid #AAAAAA;">
				<tr>
					<td width="100" class="head1">EXE File Hash</td>
					<td width="335" class="white"><INPUT type="text" name="textExecutionFileHash" value="" class="readonly" readonly style="width:100%;"></td>
				</tr>
				<tr>
					<td width="100" class="head1">EXE File Folder</td>
					<td width="335" class="white"><INPUT type="text" name="textExecutionFileFolder" value="" style="width:100%;"></td>
				</tr>
				<tr>
					<td width="100" class="head1">EXE File Name</td>
					<td width="335" class="white"><INPUT type="text" name="textExecutionFileName" value="" style="width:100%;"></td>
				</tr>
				<tr>
					<td width="100" class="head1">Locale Program</td>
					<td width="335" class="white">
						<select name="comboLocaleProgram" class="select1" onchange="onLocaleProgramChanged();">
							<option value="">none</option>
							<option value="AppLocale">AppLocale</option>
							<option value="JonK">JonK</option>
							<option value="KonJ">KonJ</option>
						</select>
						<select name="comboAppLocaleOption" class="select1" style="visibility:hidden;">
							<option value="/L411">Japanese(/L411)</option>
							<option value="/L412">Korean(/L412)</option>
							<option value="/L804">Chinese(/L804)</option>
						</select>
					</td>
				</tr>
				<tr>
					<td width="100" class="head1">Hooking Delay</td>
					<td width="335" class="white"><INPUT type="text" name="textDelay" value="0" class="input2" maxlength=3 style="width:30px;"> sec</td>
				</tr>
			</table>
			<!--// Inner Table -->

		</td>
	</tr>
	<tr height="9" style="background-image:url(img/bg_yellowbox_bottom.gif);background-repeat:no-repeat;background-position-x:left;background-position-y:top;">
		<td>
		</td>
	</tr>
</table>
<!-- End of Yellowbox -->

<br />

<center>
<INPUT type="button" name="btnRun" value="START" onClick="autoRun();" style="width:90px;height:30px;margin:5 10 10 5;font-size:11pt;font-weight:bold;">
</center>

</BODY>
</HTML>
